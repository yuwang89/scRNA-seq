---
title: "Seurat_scRNA-CELL"
author: "wangy"
date: "2021/10/20"
output: html_document
---

```{r setup, include=FALSE}
library(dplyr)
library(Seurat)
library(patchwork)
library("ggplot2")
library(ggsci)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/wangy/Box/yw/filtered_gene_bc_matrices/hg19")

# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
knitr::opts_chunk$set(echo = TRUE)
```
#QC and selecting cells for further analysis
```{r, cars}
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")

# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.

plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

#We filter cells that have unique feature counts over 2,500 or less than 200 according to the violin plot
#We filter cells that have >5% mitochondrial counts
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
```
## Normalizing the data
```{r pressure, echo=FALSE}
#LogNormalize = log(counts of feature /total counts of this cell x 10,000)
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
```
## Identification of highly variable features (highly expressed in some cells, and lowly expressed in others)
```{r}
#Identifies 2000 features for the following analysis
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000) #By default return 2,000 features per dataset. 

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
CombinePlots(plots =  list(plot1, plot2), legend = "bottom")
```
## Scaling the data
```{r pressure, echo=FALSE}
#Scales and centers features in the dataset. highly-expressed genes do not dominate
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
```
#Perform linear dimensional reduction
```{r pressure, echo=FALSE}
## RUN PCA
#the features must be present in the scaled data.
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))

# visualize PCA results a few different ways
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)

#visualize PC1 and PC2 to find the target gene for distinguishing cell groups
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")

#PCA plot 
DimPlot(pbmc, reduction = "pca", group.by = NULL)

#heatmap to display the sources of heterogeneity
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(pbmc, dims = 1:15, cells = 500, balanced = TRUE)
```
#Determine the ‘dimensionality’ of the dataset
```{r pressure, echo=FALSE}
##单细胞RNA-seq的噪声大，因此采用PCA值作为聚类的依据，那么如何判断采用哪些PC或多少PC？
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)

JackStrawPlot(pbmc, dims = 1:15) #前10-12个PC较为显著，可以作为我们后续聚类的依据.

ElbowPlot(pbmc)
#一是最显著的PC不一定能帮助我们区分一些很小的类，这些类由于本身数量较少，因此很容易淹没在噪声中；二是如果对取多少PC或哪些PC没有把握，则尽量往多了取，噪声虽然会更多，但总比信息丢失要好

#Returns a set of genes, based on the JackStraw analysis, that have statistically significant associations with a set of PCs.
?PCASigGenes
head(PCASigGenes(pbmc,pcs.use=2, pval.cut = 0.7))
```
#Cluster the cells
```{r pressure, echo=FALSE}
#construct a KNN graph based on the euclidean distance in PCA space
#takes as input the previously defined dimensionality of the dataset
pbmc <- FindNeighbors(pbmc, dims = 1:10)

#iteratively group cells together, 
#resolution parameter that sets the ‘granularity’ of the downstream clustering
#0.4-1.2 typically returns good results for single-cell datasets of around 3K cells,often increases for larger datasets.
pbmc <- FindClusters(pbmc, resolution = 0.5)

# 查看每一类有多少个细胞
table(pbmc@active.ident)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)

#提取部分细胞
head(colnames(pbmc@assays$RNA@counts)[1:30])
subbset<-subset(x=pbmc,cells=colnames(pbmc@assays$RNA@counts)[1:30])
subbset
```
#Constructs a phylogenetic tree relating the 'average' cell from each identity class. 
# Tree is estimated based on a distance matrix constructed in either gene expression space or PCA spac
```{r}
?BuildClusterTree
pbmc<-BuildClusterTree(pbmc)
Tool(object = pbmc, slot = 'BuildClusterTree')
PlotClusterTree(pbmc)
```
#Run non-linear dimensional reduction (UMAP/tSNE)
```{r}
#Run UMAP
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap", label = TRUE)

#RUN tSNE
pbmc <- RunTSNE(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "tsne", label = TRUE)+scale_color_npg()
```
#Finding differentially expressed features (cluster biomarkers)
```{r pressure, echo=FALSE}
#这是一种one-others的差异分析方法，就是cluster1与其余的cluster来做比较，当然这个是可以指定的,参数就是ident.2。
# find all markers of cluster 2 (ident.1 =2 is to find cluster2)
cluster2.markers <- FindMarkers(pbmc, ident.1 = 2, min.pct = 0.25)
head(cluster2.markers, n = 5)

# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
head(cluster5.markers, n = 5)

# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

#set 2 gene (n=2 , 2 rowns) of each clusters
pbmc.markers %>%
    group_by(cluster) %>%
    slice_max(n = 2, order_by = avg_log2FC)

#tests for differential expression, "0.5 < AUC < 1，优于随机分类器".
cluster0.markers <- FindMarkers(pbmc, ident.1 = 0, logfc.threshold = 0.25, test.use = "roc", only.pos = TRUE)
head(cluster0.markers, n = 5)

#visualizing marker expression
#shows expression distributions across clusters
VlnPlot(pbmc, features = c("MS4A1", "CD79A", "RPS12"))

# you can plot raw counts （没有经过标准化和scale） as well 
VlnPlot(pbmc, features = c("NKG7", "PF4","RPS12"), slot = "counts", log = TRUE)

#heatmap, 
top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
DoHeatmap(pbmc, features = top10$gene) + NoLegend()

#在umap图上画出差异基因的表达情况
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
    "CD8A"))
```
#Assigning cell type identity to clusters
```{r pressure, echo=FALSE}
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("celldex")

library(SingleR)
library(celldex)
#使用HumanPrimaryCellAtlasData()函数加载参考数据集
hpca.se <- HumanPrimaryCellAtlasData()

#use canonical markers to easily match the unbiased clustering to known cell types

#Cluster ID	Markers	Cell Type
# 0	IL7R, CCR7.	Naive CD4+ T
# 1	CD14, LYZ.	CD14+ Mono
# 2	IL7R, S100A4.	Memory CD4+
# 3	MS4A1.	B
# 4	CD8A.	CD8+ T
# 5	FCGR3A, MS4A7.	FCGR3A+ Mono
# 6	GNLY, NKG7.	NK
# 7	FCER1A, CST3.	DC
# 8	PPBP.	Platelet

new.cluster.ids <- c("Naive CD4 T", "CD14+ Mono", "Memory CD4 T", "B", "CD8 T", "FCGR3A+ Mono",
    "NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
```
#细胞周期分析
```{r}
cc.genes

?CellCycleScoring
## Not run: 
# pbmc_small doesn't have any cell-cycle genes
# To run CellCycleScoring, please use a dataset with cell-cycle genes
# An example is available at http://satijalab.org/seurat/cell_cycle_vignette.html
pbmc <- CellCycleScoring(
  object = pbmc,
  g2m.features = cc.genes$g2m.genes,
  s.features = cc.genes$s.genes
)
head(x = pbmc@meta.data)[,c(7,8,9,10,11)] # 我是为了好看取了几列来看，你大可不必。

VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt","percent.HB","G2M.Score","S.Score"), ncol = 6)#+scale_color_npg() 

```
#save a single R object
```{r}
saveRDS(pbmc, file = "C:/Users/wangy/Box/yw/pbmc3k_final.rds")
```

